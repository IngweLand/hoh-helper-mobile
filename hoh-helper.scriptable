{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "light-brown",
    "glyph" : "magic"
  },
  "name" : "HoH Helper",
  "script" : "const usernameKeychainKey = \"hoh_helper_mobile_username\";\nconst passwordKeychainKey = \"hoh_helper_mobile_password\";\n\n\nconst PROTOBUF_CONTENT_TYPE = 'application\/x-protobuf';\nconst JSON_CONTENT_TYPE = 'application\/json';\nconst loginUrl = \"https:\/\/www.heroesgame.com\/api\/login\";\nconst accountPlayUrl = \"https:\/\/un0.heroesofhistorygame.com\/core\/api\/account\/play\";\nconst startupApiUrl = \"https:\/\/un1.heroesofhistorygame.com\/game\/startup\";\nconst fogInGameDataUrl = \"https:\/\/forgeofgames.com\/api\/hoh\/inGameData\"\n\nasync function login() {\n    const username = Keychain.get(usernameKeychainKey)\n    const password = Keychain.get(passwordKeychainKey)\n    const loginPayload = {\n        username,\n        password,\n        useRememberMe: false\n    };\n\n    const loginReq = new Request(loginUrl);\n    loginReq.method = \"POST\";\n    loginReq.headers = addDefaultHeaders();\n    loginReq.body = JSON.stringify(loginPayload);\n\n    const loginData = await loginReq.loadJSON();\n\n    const redirectReq = new Request(loginData.redirectUrl);\n    redirectReq.method = \"GET\";\n    const redirectHtml = await redirectReq.loadString();\n    let sessionCookie = redirectReq.response.cookies.find(c => c.name === \"SESSION\");\n    let cookieHeader = sessionCookie ? \"SESSION=\" + sessionCookie.value : \"\";\n    if (cookieHeader === \"\") {\n        throw new Error(\"SESSION cookie not found.\");\n    }\n    const clientVersionMatch = redirectHtml.match(\/const\\s+clientVersion\\s*=\\s*\"([^\"]+)\"\/);\n\n    if (!clientVersionMatch) {\n        throw new Error(\"Client version not found.\");\n    }\n\n    const clientVersion = clientVersionMatch[1];\n\n    const playPayload = {\n        createDeviceToken: false,\n        meta: {\n            clientVersion,\n            device: \"browser\",\n            deviceHardware: \"browser\",\n            deviceManufacturer: \"none\",\n            deviceName: \"browser\",\n            locale: \"en_DK\",\n            networkType: \"wlan\",\n            operatingSystemName: \"browser\",\n            operatingSystemVersion: \"1\",\n            userAgent: \"hoh-helper-mobile\"\n        },\n        network: \"BROWSER_SESSION\",\n        token: \"\",\n        worldId: null\n    };\n\n    const playReq = new Request(accountPlayUrl);\n    playReq.method = \"POST\";\n    playReq.headers = {\n        \"Content-Type\": JSON_CONTENT_TYPE,\n        \"Cookie\": cookieHeader\n    };\n    playReq.body = JSON.stringify(playPayload);\n\n    return await playReq.loadJSON();\n}\n\nfunction addStartupHeaders(sessionData) {\n    const headers = {};\n    headers['X-AUTH-TOKEN'] = sessionData.sessionId;\n    headers['X-Request-Id'] = UUID.string();\n    headers['X-Platform'] = 'browser';\n    headers['X-ClientVersion'] = sessionData.clientVersion;\n    headers['Accept-Encoding'] = 'gzip';\n    headers['Accept'] = PROTOBUF_CONTENT_TYPE;\n    headers['Content-Type'] = PROTOBUF_CONTENT_TYPE;\n    return headers;\n}\n\nfunction addDefaultHeaders() {\n    const headers = {};\n    headers['Content-Type'] = JSON_CONTENT_TYPE;\n    return headers;\n}\n\nasync function getStartupAsync(sessionData) {\n    const req = new Request(startupApiUrl);\n    req.method = \"POST\";\n    req.headers = addStartupHeaders(sessionData);\n    const response = await req.load();\n    return response.toBase64String()\n}\n\nasync function sendStartupAsync(startupData) {\n    const payload = {\n        inGameStartupData: startupData\n    };\n    const req = new Request(fogInGameDataUrl);\n    req.method = \"POST\";\n    req.headers = addDefaultHeaders();\n    req.body = JSON.stringify(payload);\n\n    return await req.loadJSON();\n}\n\nfunction checkCredentials() {\n    return Keychain.contains(usernameKeychainKey) && Keychain.contains(passwordKeychainKey);\n}\n\nasync function setupCredentials() {\n    let prompt = new Alert()\n    prompt.message = \"Enter your in-game credentials.\"\n    prompt.addTextField(\"Username\")\n    prompt.addSecureTextField(\"Password\")\n    prompt.addAction(\"Save\")\n    prompt.addCancelAction(\"Cancel\")\n    const action = await prompt.present()\n\n    let username = prompt.textFieldValue(0)\n    let password = prompt.textFieldValue(1)\n\n    if (action === 0) {\n        Keychain.set(usernameKeychainKey, username)\n        Keychain.set(passwordKeychainKey, password)\n    }\n\n    return action;\n}\n\nasync function pickAction() {\n    let prompt = new Alert()\n    prompt.message = \"Do you want to run the script or delete login credentials?\"\n    prompt.addAction(\"Run\")\n    prompt.addDestructiveAction(\"Delete credentials\")\n    prompt.addCancelAction(\"Cancel\")\n    return await prompt.present()\n}\n\nasync function deleteCredentials() {\n    Keychain.remove(usernameKeychainKey)\n    Keychain.remove(passwordKeychainKey)\n}\n\nasync function main() {\n    if (!checkCredentials()) {\n        const setupCredentialsAction = await setupCredentials()\n\n        if (setupCredentialsAction !== 0) {\n            return;\n        }\n        if (!checkCredentials()) {\n            let alert = new Alert()\n            alert.title = \"Credentials not set.\"\n            alert.message = \"You must provide your in-game login credentials. Restart the script to proceed.\"\n            alert.addAction(\"OK\")\n            await alert.present()\n            return;\n        }\n    } else {\n        const action = await pickAction();\n        if (action === 1) {\n            await deleteCredentials();\n            return;\n        } else if (action === 2) {\n            return;\n        }\n    }\n\n    const sessionData = await login();\n    if (!sessionData) return;\n    console.log(\"Session data received\");\n\n    const startupData = await getStartupAsync(sessionData);\n    if (!startupData) return;\n    console.log(\"Startup data received\");\n\n    const fogResponse = await sendStartupAsync(startupData);\n    if (fogResponse?.webResourceUrl) {\n        console.log(\"Fog data received\");\n        Safari.open(fogResponse.webResourceUrl);\n    }\n}\n\nawait main();",
  "share_sheet_inputs" : [

  ]
}